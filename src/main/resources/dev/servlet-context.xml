<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit" 
	xsi:schemaLocation=" 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd 
        http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd 
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.6.xsd" >
    <!-- 静态资源文件的处理-->
    <mvc:default-servlet-handler/>
	<!-- 静态资源文件的处理 二
	<mvc:resources mapping="/css1/**" location="/css/" />-->

	<!-- 引入jdbc.properties属性文件方便数据源的配置 -->
    <context:property-placeholder location="classpath:jdbc.properties, classpath:rabbitmq.properties" />
	<!-- 扫描package方便注解依赖注入-->
	<context:component-scan base-package="com.shsxt.crm" />
	<mvc:annotation-driven />
	<!-- 定时任务的注解驱动 -->
	<task:annotation-driven/>
	<!-- aspect驱动 -->
	<aop:aspectj-autoproxy />
	
	<!-- 视图配置 -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/views/" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="prefix" value="" />
		<property name="suffix" value=".ftl" />
		<property name="contentType" value="text/html;charset=UTF-8"/>
	</bean>
	
	<mvc:annotation-driven>
	     <mvc:message-converters>
	            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
	            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
	   </mvc:message-converters>
	</mvc:annotation-driven>
    
     <!-- 通过工厂Bean创建mongo连接实例,没有密码就把username和password属性删除了-->
    <mongo:db-factory host="localhost" port="27017" dbname="log" />
    <!-- mongo模板操作对象-->
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean> 
	
	<!--拦截器配置 -->
	<mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"/> <!--拦截所有请求-->
    		<mvc:exclude-mapping path="/css/*"/><!--剔除这些请求-->
    		<mvc:exclude-mapping path="/highcharts4/*"/>
    		<mvc:exclude-mapping path="/images/*"/>
    		<mvc:exclude-mapping path="/jquery-easyui-1.3.3/*"/>
    		<mvc:exclude-mapping path="/js/*"/>
    		<mvc:exclude-mapping path="/index"/>
    		<mvc:exclude-mapping path="/user/login"/>
    		<bean class="com.shsxt.crm.interceptor.LoginInterceptor" />
    	</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 异常配置 -->
    <bean id="exceptionResolver" class="com.shsxt.base.exception.CustomExceptionResolver">
        <!-- 定义默认的异常处理页面，当该异常类型的注册时使用 
	    <property name="defaultErrorView" value="error"></property>  -->  
	    <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exceptio
	    <property name="exceptionAttribute" value="ex"></property> -->   
	    <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 
	    <property name="exceptionMappings">  
	        <props>  
	            <prop key="com.shsxt.base.exception.ParamException">error-parameter</prop>  
	        </props> 
	    </property> -->
    </bean>
    
    
    <!-- ======================配置rabbit mq================= -->
    <!-- 设置host username password -->
	<rabbit:connection-factory id="connectionFactory" host="${mq.host}" 
		username="${mq.username}" password="${mq.password}" />
    	
	<!-- 设置admin -->
	<rabbit:admin connection-factory="connectionFactory" />
	
    <!-- 设置template -->
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
		exchange="${mq.logexchange}" routing-key="${mq.logroutingkey}" 
		message-converter="jsonMessageConverter" />
		
	<!-- 消息对象json转换类 -->
    <bean id="jsonMessageConverter" 
    	class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" /> 
	
	<!-- 设置一个topic exchange -->
	<rabbit:topic-exchange name="${mq.logexchange}" durable="true" auto-declare="true" >
		<rabbit:bindings>
			<rabbit:binding queue="${mq.logqueue}" pattern="${mq.logbindpattern}" />
		</rabbit:bindings>
	</rabbit:topic-exchange>
	
	<!-- 设置一个queue -->
	<!--   durable:是否持久化 默认是的
			exclusive: 仅创建者可以使用的私有队列，断开后自动删除
			auto_delete: 当所有消费客户端连接断开后，是否自动删除队列 -->
	<rabbit:queue name="${mq.logqueue}" durable="true" exclusive="false" auto-declare="true" />
	
</beans>
